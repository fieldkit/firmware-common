include(Arduino)

enable_arduino_toolchain()

set(sources ${COMMON_SOURCE_FILES} main.cpp)

find_package(arduino-logging)
find_package(Wire)
find_package(SPI)
find_package(phylum)
find_package(module-protocol)
find_package(app-protocol)
find_package(data-protocol)
find_package(simple-lora-comms)
find_package(lwstreams)
find_package(lwcron)
find_package(nanopb)
find_package(RTCZero)
find_package(RTClib)
find_package(WiFi101)
find_package(RadioHead)
find_package(Adafruit_ASFcore)
find_package(AtSamd)
find_package(FuelGauge)
find_package(TinyGPS)
find_package(arduino-base64)
find_package(SerialFlash)

target_compile_options(phylum PUBLIC -DPHYLUM_ENABLE_SERIAL_FLASH -DPHYLUM_ENABLE_SD)

# Get the current working branch
execute_process(
  COMMAND git rev-parse --abbrev-ref HEAD
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  OUTPUT_VARIABLE GIT_BRANCH
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

# Get the latest abbreviated commit hash of the working branch
execute_process(
  COMMAND git log -1 --format=%H
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  OUTPUT_VARIABLE GIT_COMMIT_HASH
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

add_definitions("-DFIRMWARE_GIT_HASH=\"${GIT_COMMIT_HASH}\"")
add_definitions("-DFIRMWARE_GIT_BRANCH=\"${GIT_BRANCH}\"")
add_definitions("-DFIRMWARE_BUILD=\"$ENV{BUILD_TAG}\"")

option(FK_BOOTLOADER_LARGE "Require module, restarting if none are found. " ON)
if(FK_BOOTLOADER_LARGE)
  set(ARDUINO_BOOTLOADER "${CMAKE_CURRENT_SOURCE_DIR}/samd21x18_bootloader_large.ld")
  add_definitions(-DFK_BOOTLOADER_LARGE)
endif(FK_BOOTLOADER_LARGE)

add_arduino_library(fk-core "${sources}")

target_link_libraries(fk-core arduino-logging)
target_link_libraries(fk-core Wire)
target_link_libraries(fk-core SPI)
target_link_libraries(fk-core phylum)
target_link_libraries(fk-core module-protocol)
target_link_libraries(fk-core app-protocol)
target_link_libraries(fk-core data-protocol)
target_link_libraries(fk-core simple-lora-comms)
target_link_libraries(fk-core lwstreams)
target_link_libraries(fk-core lwcron)
target_link_libraries(fk-core nanopb)
target_link_libraries(fk-core RTCZero)
target_link_libraries(fk-core RTClib)
target_link_libraries(fk-core WiFi101)
target_link_libraries(fk-core RadioHead)
target_link_libraries(fk-core Adafruit_ASFcore)
target_link_libraries(fk-core AtSamd)
target_link_libraries(fk-core FuelGauge)
target_link_libraries(fk-core TinyGPS)
target_link_libraries(fk-core arduino-base64)
target_link_libraries(fk-core SerialFlash)

add_arduino_firmware(fk-core)

option(FK_DEBUG_UART_FALLBACK "On SerialUSB failure use Serial5" ON)
if(FK_DEBUG_UART_FALLBACK)
  target_compile_options(fk-core PUBLIC -DFK_DEBUG_UART_FALLBACK)
endif(FK_DEBUG_UART_FALLBACK)

option(FK_DEBUG_UART_REQUIRE_CONSOLE "Wait forever for a console connection" OFF)
if(FK_DEBUG_UART_REQUIRE_CONSOLE)
  target_compile_options(fk-core PUBLIC -DFK_DEBUG_UART_REQUIRE_CONSOLE)
endif(FK_DEBUG_UART_REQUIRE_CONSOLE)

option(FK_DEBUG_MTB_ENABLE "Enable MicroTrace Buffer" OFF)
if(FK_DEBUG_MTB_ENABLE)
  target_compile_options(fk-core PUBLIC -DFK_DEBUG_MTB_ENABLE)
endif(FK_DEBUG_MTB_ENABLE)

option(FK_API_BASE "Use given API_BASE")
if(FK_API_BASE)
  target_compile_options(fk-core PUBLIC -DFK_API_BASE="${API_BASE}")
endif(FK_API_BASE)

option(FK_CORE_GENERATION_2 "Enable Generation 2 Core hardware profile. (see harware.h)" ON)
if(FK_CORE_GENERATION_2)
  target_compile_options(fk-core PUBLIC -DFK_CORE)
  target_compile_options(fk-core PUBLIC -DFK_CORE_GENERATION_2)
else()
  target_compile_options(fk-core PUBLIC -DFK_CORE)
  target_compile_options(fk-core PUBLIC -DFK_CORE_GENERATION_1)
endif(FK_CORE_GENERATION_2)

option(FK_ENABLE_FLASH "Enable/disable flash memory." ON)
if(FK_ENABLE_FLASH)
  target_compile_options(fk-core PUBLIC -DFK_ENABLE_FLASH)
else()
  target_compile_options(fk-core PUBLIC -DFK_DISABLE_FLASH)
endif(FK_ENABLE_FLASH)

option(FK_ENABLE_LOW_POWER_SLEEP "Enable low power sleep." ON)
if(FK_ENABLE_LOW_POWER_SLEEP)
  target_compile_options(fk-core PUBLIC -DFK_ENABLE_LOW_POWER_SLEEP)
else()
  target_compile_options(fk-core PUBLIC -DFK_DISABLE_LOW_POWER_SLEEP)
endif(FK_ENABLE_LOW_POWER_SLEEP)

option(FK_ENABLE_DEEP_SLEEP "Enable deep sleep." ON)
if(FK_ENABLE_DEEP_SLEEP)
  target_compile_options(fk-core PUBLIC -DFK_ENABLE_DEEP_SLEEP)
else()
  target_compile_options(fk-core PUBLIC -DFK_DISABLE_DEEP_SLEEP)
endif(FK_ENABLE_DEEP_SLEEP)

option(FK_ENABLE_RADIO "Enable/disable LoRa radio." OFF)
if(FK_ENABLE_RADIO)
  target_compile_options(fk-core PUBLIC -DFK_DISABLE_RADIO)
else()
  target_compile_options(fk-core PUBLIC -DFK_ENABLE_RADIO)
endif(FK_ENABLE_RADIO)

option(FK_WIFI_ALWAYS_ON "If ON never turn off Wifi" OFF)
if(FK_WIFI_ALWAYS_ON)
  target_compile_options(fk-core PUBLIC -DFK_WIFI_ALWAYS_ON)
endif(FK_WIFI_ALWAYS_ON)

option(FK_WIFI_STARTUP_ONLY "Only run Wifi on startup" OFF)
if(FK_WIFI_STARTUP_ONLY)
  target_compile_options(fk-core PUBLIC -DFK_WIFI_STARTUP_ONLY)
endif(FK_WIFI_STARTUP_ONLY)

option(FK_CORE_REQUIRE_MODULES "Require module, restarting if none are found. " OFF)
if(FK_CORE_REQUIRE_MODULES)
  target_compile_options(fk-core PUBLIC -DFK_CORE_REQUIRE_MODULES)
endif(FK_CORE_REQUIRE_MODULES)

option(FK_PROFILE_STANDARD "Standard Profile" ON)
if(FK_PROFILE_STANDARD)
  add_arduino_library(fk-core-standard "${sources}")

  target_compile_options(fk-core-standard PUBLIC -DFK_PROFILE_STANDARD)
  target_compile_options(fk-core-standard PUBLIC -DFK_CORE)
  target_compile_options(fk-core-standard PUBLIC -DFK_CORE_GENERATION_2)
  target_compile_options(fk-core-standard PUBLIC -DFK_DEBUG_UART_FALLBACK)
  target_compile_options(fk-core-standard PUBLIC -DFK_ENABLE_FLASH)
  target_compile_options(fk-core-standard PUBLIC -DFK_DISABLE_RADIO)

  target_link_libraries(fk-core-standard arduino-logging)
  target_link_libraries(fk-core-standard Wire)
  target_link_libraries(fk-core-standard SPI)
  target_link_libraries(fk-core-standard phylum)
  target_link_libraries(fk-core-standard module-protocol)
  target_link_libraries(fk-core-standard app-protocol)
  target_link_libraries(fk-core-standard data-protocol)
  target_link_libraries(fk-core-standard simple-lora-comms)
  target_link_libraries(fk-core-standard lwstreams)
  target_link_libraries(fk-core-standard lwcron)
  target_link_libraries(fk-core-standard nanopb)
  target_link_libraries(fk-core-standard RTCZero)
  target_link_libraries(fk-core-standard RTClib)
  target_link_libraries(fk-core-standard WiFi101)
  target_link_libraries(fk-core-standard RadioHead)
  target_link_libraries(fk-core-standard Adafruit_ASFcore)
  target_link_libraries(fk-core-standard AtSamd)
  target_link_libraries(fk-core-standard FuelGauge)
  target_link_libraries(fk-core-standard TinyGPS)
  target_link_libraries(fk-core-standard arduino-base64)
  target_link_libraries(fk-core-standard SerialFlash)

  add_arduino_firmware(fk-core-standard)
endif(FK_PROFILE_STANDARD)

option(FK_PROFILE_AMAZON "Amazon Profile" ON)
if(FK_PROFILE_AMAZON)
  add_arduino_library(fk-core-amazon "${sources}")

  target_compile_options(fk-core-amazon PUBLIC -DFK_PROFILE_AMAZON)
  target_compile_options(fk-core-amazon PUBLIC -DFK_CORE)
  target_compile_options(fk-core-amazon PUBLIC -DFK_CORE_GENERATION_2)
  target_compile_options(fk-core-amazon PUBLIC -DFK_CORE_REQUIRE_MODULES)
  target_compile_options(fk-core-amazon PUBLIC -DFK_WIFI_STARTUP_ONLY)
  target_compile_options(fk-core-amazon PUBLIC -DFK_DEBUG_UART_FALLBACK)
  target_compile_options(fk-core-amazon PUBLIC -DFK_ENABLE_FLASH)
  target_compile_options(fk-core-amazon PUBLIC -DFK_DISABLE_RADIO)

  target_link_libraries(fk-core-amazon arduino-logging)
  target_link_libraries(fk-core-amazon Wire)
  target_link_libraries(fk-core-amazon SPI)
  target_link_libraries(fk-core-amazon phylum)
  target_link_libraries(fk-core-amazon module-protocol)
  target_link_libraries(fk-core-amazon app-protocol)
  target_link_libraries(fk-core-amazon data-protocol)
  target_link_libraries(fk-core-amazon simple-lora-comms)
  target_link_libraries(fk-core-amazon lwstreams)
  target_link_libraries(fk-core-amazon lwcron)
  target_link_libraries(fk-core-amazon nanopb)
  target_link_libraries(fk-core-amazon RTCZero)
  target_link_libraries(fk-core-amazon RTClib)
  target_link_libraries(fk-core-amazon WiFi101)
  target_link_libraries(fk-core-amazon RadioHead)
  target_link_libraries(fk-core-amazon Adafruit_ASFcore)
  target_link_libraries(fk-core-amazon AtSamd)
  target_link_libraries(fk-core-amazon FuelGauge)
  target_link_libraries(fk-core-amazon TinyGPS)
  target_link_libraries(fk-core-amazon arduino-base64)
  target_link_libraries(fk-core-amazon SerialFlash)

  add_arduino_firmware(fk-core-amazon)
endif(FK_PROFILE_AMAZON)

option(FK_DEBUG_INSTRUMENTATION "Enable function instrumentation." OFF)
if(FK_DEBUG_INSTRUMENTATION)
  target_compile_options(fk-core PUBLIC -Wall -Werror -finstrument-functions)
endif(FK_DEBUG_INSTRUMENTATION)
